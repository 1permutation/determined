-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DetQL.Enum.Trials_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "trials"

  - End\_time - column name
  - Experiment\_id - column name
  - Hparams - column name
  - Id - column name
  - Seed - column name
  - Start\_time - column name
  - State - column name
  - Warm\_start\_checkpoint\_id - column name

-}
type Trials_select_column
    = End_time
    | Experiment_id
    | Hparams
    | Id
    | Seed
    | Start_time
    | State
    | Warm_start_checkpoint_id


list : List Trials_select_column
list =
    [ End_time, Experiment_id, Hparams, Id, Seed, Start_time, State, Warm_start_checkpoint_id ]


decoder : Decoder Trials_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "end_time" ->
                        Decode.succeed End_time

                    "experiment_id" ->
                        Decode.succeed Experiment_id

                    "hparams" ->
                        Decode.succeed Hparams

                    "id" ->
                        Decode.succeed Id

                    "seed" ->
                        Decode.succeed Seed

                    "start_time" ->
                        Decode.succeed Start_time

                    "state" ->
                        Decode.succeed State

                    "warm_start_checkpoint_id" ->
                        Decode.succeed Warm_start_checkpoint_id

                    _ ->
                        Decode.fail ("Invalid Trials_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Trials_select_column -> String
toString enum =
    case enum of
        End_time ->
            "end_time"

        Experiment_id ->
            "experiment_id"

        Hparams ->
            "hparams"

        Id ->
            "id"

        Seed ->
            "seed"

        Start_time ->
            "start_time"

        State ->
            "state"

        Warm_start_checkpoint_id ->
            "warm_start_checkpoint_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Trials_select_column
fromString enumString =
    case enumString of
        "end_time" ->
            Just End_time

        "experiment_id" ->
            Just Experiment_id

        "hparams" ->
            Just Hparams

        "id" ->
            Just Id

        "seed" ->
            Just Seed

        "start_time" ->
            Just Start_time

        "state" ->
            Just State

        "warm_start_checkpoint_id" ->
            Just Warm_start_checkpoint_id

        _ ->
            Nothing
