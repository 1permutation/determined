-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DetQL.Enum.Experiments_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "experiments"

  - Archived - column name
  - Config - column name
  - End\_time - column name
  - Git\_commit - column name
  - Git\_commit\_date - column name
  - Git\_committer - column name
  - Git\_remote - column name
  - Id - column name
  - Model\_definition - column name
  - Model\_packages - column name
  - Owner\_id - column name
  - Parent\_id - column name
  - Progress - column name
  - Start\_time - column name
  - State - column name

-}
type Experiments_select_column
    = Archived
    | Config
    | End_time
    | Git_commit
    | Git_commit_date
    | Git_committer
    | Git_remote
    | Id
    | Model_definition
    | Model_packages
    | Owner_id
    | Parent_id
    | Progress
    | Start_time
    | State


list : List Experiments_select_column
list =
    [ Archived, Config, End_time, Git_commit, Git_commit_date, Git_committer, Git_remote, Id, Model_definition, Model_packages, Owner_id, Parent_id, Progress, Start_time, State ]


decoder : Decoder Experiments_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "archived" ->
                        Decode.succeed Archived

                    "config" ->
                        Decode.succeed Config

                    "end_time" ->
                        Decode.succeed End_time

                    "git_commit" ->
                        Decode.succeed Git_commit

                    "git_commit_date" ->
                        Decode.succeed Git_commit_date

                    "git_committer" ->
                        Decode.succeed Git_committer

                    "git_remote" ->
                        Decode.succeed Git_remote

                    "id" ->
                        Decode.succeed Id

                    "model_definition" ->
                        Decode.succeed Model_definition

                    "model_packages" ->
                        Decode.succeed Model_packages

                    "owner_id" ->
                        Decode.succeed Owner_id

                    "parent_id" ->
                        Decode.succeed Parent_id

                    "progress" ->
                        Decode.succeed Progress

                    "start_time" ->
                        Decode.succeed Start_time

                    "state" ->
                        Decode.succeed State

                    _ ->
                        Decode.fail ("Invalid Experiments_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Experiments_select_column -> String
toString enum =
    case enum of
        Archived ->
            "archived"

        Config ->
            "config"

        End_time ->
            "end_time"

        Git_commit ->
            "git_commit"

        Git_commit_date ->
            "git_commit_date"

        Git_committer ->
            "git_committer"

        Git_remote ->
            "git_remote"

        Id ->
            "id"

        Model_definition ->
            "model_definition"

        Model_packages ->
            "model_packages"

        Owner_id ->
            "owner_id"

        Parent_id ->
            "parent_id"

        Progress ->
            "progress"

        Start_time ->
            "start_time"

        State ->
            "state"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Experiments_select_column
fromString enumString =
    case enumString of
        "archived" ->
            Just Archived

        "config" ->
            Just Config

        "end_time" ->
            Just End_time

        "git_commit" ->
            Just Git_commit

        "git_commit_date" ->
            Just Git_commit_date

        "git_committer" ->
            Just Git_committer

        "git_remote" ->
            Just Git_remote

        "id" ->
            Just Id

        "model_definition" ->
            Just Model_definition

        "model_packages" ->
            Just Model_packages

        "owner_id" ->
            Just Owner_id

        "parent_id" ->
            Just Parent_id

        "progress" ->
            Just Progress

        "start_time" ->
            Just Start_time

        "state" ->
            Just State

        _ ->
            Nothing
