-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DetQL.Scalar exposing (Bytea(..), Checkpoint_state(..), Codecs, Experiment_state(..), Float8(..), Id(..), Jsonb(..), Step_state(..), Timestamp(..), Timestamptz(..), Trial_state(..), Uuid(..), Validation_state(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Bytea
    = Bytea String


type Checkpoint_state
    = Checkpoint_state String


type Experiment_state
    = Experiment_state String


type Float8
    = Float8 String


type Id
    = Id String


type Jsonb
    = Jsonb String


type Step_state
    = Step_state String


type Timestamp
    = Timestamp String


type Timestamptz
    = Timestamptz String


type Trial_state
    = Trial_state String


type Uuid
    = Uuid String


type Validation_state
    = Validation_state String


defineCodecs :
    { codecBytea : Codec valueBytea
    , codecCheckpoint_state : Codec valueCheckpoint_state
    , codecExperiment_state : Codec valueExperiment_state
    , codecFloat8 : Codec valueFloat8
    , codecId : Codec valueId
    , codecJsonb : Codec valueJsonb
    , codecStep_state : Codec valueStep_state
    , codecTimestamp : Codec valueTimestamp
    , codecTimestamptz : Codec valueTimestamptz
    , codecTrial_state : Codec valueTrial_state
    , codecUuid : Codec valueUuid
    , codecValidation_state : Codec valueValidation_state
    }
    -> Codecs valueBytea valueCheckpoint_state valueExperiment_state valueFloat8 valueId valueJsonb valueStep_state valueTimestamp valueTimestamptz valueTrial_state valueUuid valueValidation_state
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueBytea valueCheckpoint_state valueExperiment_state valueFloat8 valueId valueJsonb valueStep_state valueTimestamp valueTimestamptz valueTrial_state valueUuid valueValidation_state
    ->
        { codecBytea : Codec valueBytea
        , codecCheckpoint_state : Codec valueCheckpoint_state
        , codecExperiment_state : Codec valueExperiment_state
        , codecFloat8 : Codec valueFloat8
        , codecId : Codec valueId
        , codecJsonb : Codec valueJsonb
        , codecStep_state : Codec valueStep_state
        , codecTimestamp : Codec valueTimestamp
        , codecTimestamptz : Codec valueTimestamptz
        , codecTrial_state : Codec valueTrial_state
        , codecUuid : Codec valueUuid
        , codecValidation_state : Codec valueValidation_state
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueBytea valueCheckpoint_state valueExperiment_state valueFloat8 valueId valueJsonb valueStep_state valueTimestamp valueTimestamptz valueTrial_state valueUuid valueValidation_state
    = Codecs (RawCodecs valueBytea valueCheckpoint_state valueExperiment_state valueFloat8 valueId valueJsonb valueStep_state valueTimestamp valueTimestamptz valueTrial_state valueUuid valueValidation_state)


type alias RawCodecs valueBytea valueCheckpoint_state valueExperiment_state valueFloat8 valueId valueJsonb valueStep_state valueTimestamp valueTimestamptz valueTrial_state valueUuid valueValidation_state =
    { codecBytea : Codec valueBytea
    , codecCheckpoint_state : Codec valueCheckpoint_state
    , codecExperiment_state : Codec valueExperiment_state
    , codecFloat8 : Codec valueFloat8
    , codecId : Codec valueId
    , codecJsonb : Codec valueJsonb
    , codecStep_state : Codec valueStep_state
    , codecTimestamp : Codec valueTimestamp
    , codecTimestamptz : Codec valueTimestamptz
    , codecTrial_state : Codec valueTrial_state
    , codecUuid : Codec valueUuid
    , codecValidation_state : Codec valueValidation_state
    }


defaultCodecs : RawCodecs Bytea Checkpoint_state Experiment_state Float8 Id Jsonb Step_state Timestamp Timestamptz Trial_state Uuid Validation_state
defaultCodecs =
    { codecBytea =
        { encoder = \(Bytea raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Bytea
        }
    , codecCheckpoint_state =
        { encoder = \(Checkpoint_state raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Checkpoint_state
        }
    , codecExperiment_state =
        { encoder = \(Experiment_state raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Experiment_state
        }
    , codecFloat8 =
        { encoder = \(Float8 raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Float8
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJsonb =
        { encoder = \(Jsonb raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Jsonb
        }
    , codecStep_state =
        { encoder = \(Step_state raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Step_state
        }
    , codecTimestamp =
        { encoder = \(Timestamp raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Timestamp
        }
    , codecTimestamptz =
        { encoder = \(Timestamptz raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Timestamptz
        }
    , codecTrial_state =
        { encoder = \(Trial_state raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Trial_state
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    , codecValidation_state =
        { encoder = \(Validation_state raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Validation_state
        }
    }
